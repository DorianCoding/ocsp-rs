//! ocsp-rs provides de/serialization for ocsp request and response in asn.1 der

use simple_asn1::{self, ASN1Block};

/// OCSP request in asn1 der 
///
/// following test case is generated from openssl
/// 
///```rust,
///let ocsp_req = "306e306c304530433041300906052b0e\
///03021a05000414694d18a9be42f78026\
///14d4844f23601478b788200414397be0\
///02a2f571fd80dceb52a17a7f8b632be7\
///5502086378e51d448ff46da223302130\
///1f06092b060105050730010204120410\
///1cfc8fa3f5e15ed760707bc46670559b";
///let ocsp_bin = hex::decode(ocsp_req).unwrap();
///let asn1 = simple_asn1::from_der(&ocsp_bin[..]).unwrap();
///```
struct OcspRequest {
    data: Vec<ASN1Block>,
}

#[cfg(test)]
mod tests {
    use hex;
    use simple_asn1;
    /// test data produces an ocsp request generated by openssl.
    #[test]
    #[ignore]
    fn ocsp_req_from_der() {
        let ocsp_req_hex = "306e306c304530433041300906052b0e\
03021a05000414694d18a9be42f78026\
14d4844f23601478b788200414397be0\
02a2f571fd80dceb52a17a7f8b632be7\
5502086378e51d448ff46da223302130\
1f06092b060105050730010204120410\
1cfc8fa3f5e15ed760707bc46670559b";
        let ocsp_req_bin = hex::decode(ocsp_req_hex).unwrap();
        let asn1b = simple_asn1::from_der(&ocsp_req_bin[..]).unwrap();
        println!("{:?}", asn1b);
    }
}
